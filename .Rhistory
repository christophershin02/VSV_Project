id = id,
Amino_Acid = Amino_Acid,
fill = pose_dataframe[[fill_col]])) +
geom_bar(stat = "identity") +
geom_tile(aes(x=factor(seq_along(Amino_Acid)),
y=2.5,
fill=pose_dataframe[[fill_col]]),
height = 5,
alpha=0.3) +
scale_fill_manual(values=c("black", "gold"),
labels = c("No", "Yes")) +
labs(
x = NULL,
y = NULL,
fill = "On Epitope?",
title = label
) +
scale_x_discrete(breaks = seq(0, length(conservation.df$Amino_Acid), by = 5)) +
theme(axis.text.x = element_text(color = "black", size = 4, angle = 90, hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "black", size = 10, angle = 0, hjust = 1, vjust = .5, face = "plain")) +
theme(aspect.ratio = 0.3,
legend.position = "none",
axis.title = element_text(size = 8, vjust = 0),
legend.text = element_text(size = 8),
plot.title = element_text(color = "black", size = 18, face = 'bold')
)
#axis.title.x = element_text(color = "grey20", size = 12, angle = 0, hjust = .5, vjust = 0, face = "plain"),
#axis.title.y = element_text(color = "grey20", size = 12, angle = 90, hjust = .5, vjust = .5, face = "plain"))
cat("Created ggplot \n")
return(g)
}
### Function that takes in the residue id number and whichever poses you want to compare. It will check each pose at the res_id and output whether the res_id is at the epitope
#Example: compare_sequences(1,Pose110_Cluster50,Pose119_Cluster54,Pose348_Cluster85)
#This will compare the epitope boolean value for each of the poses at residue 1
compare_sequences <- function(id_num, ...) {
pose_list <- list(...)
for (i in 1:length(pose_list)) {
column_names <- colnames(pose_list[[i]])
epitope_column <- column_names[3]
amino_acid_column <- column_names[1]
epitope_value <- pose_list[[i]][id_num, epitope_column]
amino_acid <- pose_list[[i]][id_num, amino_acid_column]
cat(paste0(epitope_column," residue_num|amino_acid|epitope_boolean: ",id_num,amino_acid," ",epitope_value,"\n"))
}
}
# Save a legend of a ggplot
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
#Using the function
read_epitope("Pose3_Cluster14","1E9")
read_epitope("Pose75_Cluster29","1E9")
read_epitope("Pose110_Cluster50","1E9")
read_epitope("Pose24_Cluster16","1E9")
read_epitope("Pose471_Cluster99","1E9")
read_epitope("Pose137_Cluster88","8G5")
read_epitope("Pose157_Cluster67","8G5")
read_epitope("Pose119_Cluster54","8G5")
read_epitope("Pose348_Cluster85","8G5")
read_epitope("Pose349_Cluster91","8G5")
### 1E9 ###
pose3 <- make_graph(Pose3_Cluster14)
pose75 <- make_graph(Pose75_Cluster29)
pose110 <- make_graph(Pose110_Cluster50)
pose24 <- make_graph(Pose24_Cluster16)
pose471 <- make_graph(Pose471_Cluster99)
### 8G5 ###
pose137 <- make_graph(Pose137_Cluster88)
pose157 <- make_graph(Pose157_Cluster67)
pose119 <- make_graph(Pose119_Cluster54)
pose348 <- make_graph(Pose348_Cluster85)
pose349 <- make_graph(Pose349_Cluster91)
### 1E9 ###
pose3_plotly <- ggplotly(pose3, tooltip = c("id","Amino_Acid","Conservation_Score"))
### 1E9 ###
pose3_plotly <- ggplotly(pose3, tooltip = c("id","Amino_Acid","Conservation_Score"))
#Note: If this doesnt work you might have to go to the epitope-functions.R and change legend.position = "top" or something
pose3.legend <- pose3 + theme(legend.position = "top")
pose3.legend
legend <- get_legend(pose3.legend)
legend
#Creating the x and y axis labels
title.Grob <- textGrob("Top 5 Poses for 1E9 Antibody", gp=gpar(fontsize = 20))
legend.Grob <- textGrob (" ' ' No conservation  '.' Weakly conserved \n ':' Strongly conserved  '*' Fully Conserved")
y.grob <- textGrob("Conservation Score",
gp=gpar(fontsize=15), rot=90)
x.grob <- textGrob("Residue Number", vjust = 0,
gp=gpar(  fontsize=15))
#Combining all the plots together
figure_1E9 <- pose3 + pose75 + pose110 + pose24 + pose471 +
plot_layout(ncol = 1, nrow = 5,  heights = c(25,25,25,25,25))
#Arranging the elements
fig1 <- grid.arrange(title.Grob,legend.Grob,legend,patchworkGrob(figure_1E9),
nrow=4,ncol=1, heights = c(0.6,0.6,0.2,16),
left = y.grob, bottom = x.grob)
ggsave("1E9_test.png", fig1 ,width = 10, height = 22, units = "in", limitsize = FALSE)
### 1E9 ###
pose3_plotly <- ggplotly(pose3, tooltip = c("id","Amino_Acid","Conservation_Score"))
pose3_plotly
htmlwidgets::saveWidget(pose3, file = "pose3_1E9.html")
htmlwidgets::saveWidget(pose3, file = "pose3_1E9.html")
library(htmlwidgets)
htmlwidgets::saveWidget(pose3, file = "pose3_1E9.html")
saveWidget(pose3, file = "pose3_1E9.html")
saveWidget(pose3_plotly, file = "pose3_1E9.html")
pose3_plotly
### 1E9 ###
pose3_plotly <- ggplotly(pose3, tooltip = c("id","Amino_Acid","Conservation_Score"))
pose3_plotly
saveWidget(pose3_plotly, file = "pose3_1E9.html")
pose75_plotly <- ggplotly(pose75, tooltip = c("id","Amino_Acid","Conservation_Score"))
saveWidget(pose75_plotly, file = "pose75_1E9.html")
pose24_plotly <- ggplotly(pose24, tooltip = c("id","Amino_Acid","Conservation_Score"))
saveWidget(pose24_plotly, file = "pose24_1E9.html")
pose471_plotly <- ggplotly(pose471, tooltip = c("id","Amino_Acid","Conservation_Score"))
saveWidget(pose471_plotly, file = "pose471_1E9.html")
pose3_plotly
pose3_plotly
### 1E9 ###
pose3_plotly <- ggplotly(pose3, tooltip = c("id","Amino_Acid","Conservation_Score"))
pose3_plotly
#Importing dataset
conservation.df <- read.csv('conservation-dataframe.csv', colClasses = "character",
stringsAsFactors = FALSE, na.strings = character(0))
#Dropping the first irrelevant column
conservation.df <- conservation.df[-1]
#Changing the name of the column variables to take out the "X"
colnames(conservation.df)
new_colnames <- gsub("^X", "", colnames(conservation.df))
colnames(conservation.df) <- new_colnames
#Transpose the dataframe
conservation.df <- as.data.frame(t(conservation.df))
#Renaming the new column names
colnames(conservation.df) <- c("Amino_Acid","Conservation_Score")
#Converting the conservation scores into factor variables
# 4 = " ": No conservation
# 3 = "." Weakly conserved
# 2 = ":" Strongly conserved
# 1 = "*" Fully Conserved
conservation.df$Conservation_Score <- recode_factor(conservation.df$Conservation_Score,
"1" = " ", "2" = ".","3"=":","4"="*")
#Using the function
read_epitope("Pose3_Cluster14","1E9")
read_epitope("Pose75_Cluster29","1E9")
read_epitope("Pose110_Cluster50","1E9")
read_epitope("Pose24_Cluster16","1E9")
read_epitope("Pose471_Cluster99","1E9")
read_epitope("Pose137_Cluster88","8G5")
read_epitope("Pose157_Cluster67","8G5")
read_epitope("Pose119_Cluster54","8G5")
read_epitope("Pose348_Cluster85","8G5")
read_epitope("Pose349_Cluster91","8G5")
### 1E9 ###
pose3 <- make_graph(Pose3_Cluster14)
pose75 <- make_graph(Pose75_Cluster29)
pose110 <- make_graph(Pose110_Cluster50)
pose24 <- make_graph(Pose24_Cluster16)
pose471 <- make_graph(Pose471_Cluster99)
pose3
### 8G5 ###
pose137 <- make_graph(Pose137_Cluster88)
pose157 <- make_graph(Pose157_Cluster67)
pose119 <- make_graph(Pose119_Cluster54)
pose348 <- make_graph(Pose348_Cluster85)
pose349 <- make_graph(Pose349_Cluster91)
### 1E9 ###
pose3_plotly <- ggplotly(pose3, tooltip = c("id","Amino_Acid","Conservation_Score"))
pose3_plotly
### 1E9 ###
pose3_plotly <- ggplotly(pose3, tooltip = c("id","Conservation_Score","Amino_Acid"))
pose3_plotly
pose3_plotly
### 1E9 ###
pose3_plotly <- ggplotly(pose3, tooltip = c("id","Conservation_Score","Amino_Acid"))
pose3_plotly
### 1E9 ###
pose3_plotly <- ggplotly(pose3, tooltip = c("id","Conservation_Score","Amino_Acid")) %>%
layout(hovermode = "closest")
pose3_plotly
### Making ggplot graph function (IGNORE)
make_graph <- function(pose_dataframe) {
#Creating a variable to pass into fill = ()
fill_col <- colnames(pose_dataframe[3])
#Label for the legend
label <- gsub("_"," ", fill_col)
#Creating id and subgroup column
pose_dataframe <- pose_dataframe %>%
mutate(id = seq(from = 1, to = length(Amino_Acid)), #Creating an id number for each amino acid
subgroup = as.factor(ceiling(id/215))) #Making a subgroup,
cat("Mutating dataframe \n")
#Making ggplot
g <- ggplot(data = pose_dataframe,
aes(x = factor(seq_along(Amino_Acid)),
y = Conservation_Score,
id = id,
Amino_Acid = Amino_Acid,
text = paste("ID:", id,"<br>Amino Acid:",Amino_Acid,"<br>Conservation Score",Conservation_Score),
fill = pose_dataframe[[fill_col]])) +
geom_bar(stat = "identity") +
geom_tile(aes(x=factor(seq_along(Amino_Acid)),
y=2.5,
fill=pose_dataframe[[fill_col]]),
height = 5,
alpha=0.3) +
scale_fill_manual(values=c("black", "gold"),
labels = c("No", "Yes")) +
labs(
x = NULL,
y = NULL,
fill = "On Epitope?",
title = label
) +
scale_x_discrete(breaks = seq(0, length(conservation.df$Amino_Acid), by = 5)) +
theme(axis.text.x = element_text(color = "black", size = 4, angle = 90, hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "black", size = 10, angle = 0, hjust = 1, vjust = .5, face = "plain")) +
theme(aspect.ratio = 0.3,
legend.position = "none",
axis.title = element_text(size = 8, vjust = 0),
legend.text = element_text(size = 8),
plot.title = element_text(color = "black", size = 18, face = 'bold')
)
#axis.title.x = element_text(color = "grey20", size = 12, angle = 0, hjust = .5, vjust = 0, face = "plain"),
#axis.title.y = element_text(color = "grey20", size = 12, angle = 90, hjust = .5, vjust = .5, face = "plain"))
cat("Created ggplot \n")
return(g)
}
### 1E9 ###
pose3 <- make_graph(Pose3_Cluster14)
pose75 <- make_graph(Pose75_Cluster29)
pose110 <- make_graph(Pose110_Cluster50)
pose24 <- make_graph(Pose24_Cluster16)
pose471 <- make_graph(Pose471_Cluster99)
### 8G5 ###
pose137 <- make_graph(Pose137_Cluster88)
pose157 <- make_graph(Pose157_Cluster67)
pose119 <- make_graph(Pose119_Cluster54)
pose348 <- make_graph(Pose348_Cluster85)
pose349 <- make_graph(Pose349_Cluster91)
### 1E9 ###
pose3_plotly <- ggplotly(pose3,
tooltip = "text") %>%
layout(hovermode = "closest")
pose3_plotly
pose3
saveWidget(pose3_plotly, file = "pose3_1E9.html")
pose75_plotly <- ggplotly(pose75,
tooltip = "text")
saveWidget(pose75_plotly, file = "pose75_1E9.html")
pose110_plotly <- ggplotly(pose110,
tooltip = "text")
saveWidget(pose110_plotly, file = "pose110_1E9.html")
pose24_plotly <- ggplotly(pose24,
tooltip = "text")
saveWidget(pose24_plotly, file = "pose24_1E9.html")
pose471_plotly <- ggplotly(pose471,
tooltip = "text")
saveWidget(pose471_plotly, file = "pose471_1E9.html")
library(htmltools)
html_content_1E9 <- list(
HTML(readLines('pose3_1E9.html')),
HTML(readLines('pose75_1E9.html')),
HTML(readLines('pose110_1E9.html')),
HTML(readLines('pose24_1E9.html')),
HTML(readLines('pose471_1E9.html')),
)
finalcomb_html_1E9 <- tagList(html_content_1E9)
html_content_1E9 <- list(
HTML(readLines('pose3_1E9.html')),
HTML(readLines('pose75_1E9.html')),
HTML(readLines('pose110_1E9.html')),
HTML(readLines('pose24_1E9.html')),
HTML(readLines('pose471_1E9.html')),
)
html_content_1E9 <- list(
HTML(readLines('pose3_1E9.html')),
HTML(readLines('pose75_1E9.html')),
HTML(readLines('pose110_1E9.html')),
HTML(readLines('pose24_1E9.html')),
HTML(readLines('pose471_1E9.html'))
)
finalcomb_html_1E9 <- tagList(html_content_1E9)
save_html(finalcomb_html_1E9, file = 'plotly_1E9.html')
#Creating the x and y axis labels
title.Grob.8G5 <- textGrob("Top 5 Poses for 8G5 Antibody", gp=gpar(fontsize = 20))
legend.Grob <- textGrob (" ' ' No conservation  '.' Weakly conserved \n ':' Strongly conserved  '*' Fully Conserved")
y.grob <- textGrob("Conservation Score",
gp=gpar(fontsize=15), rot=90)
x.grob <- textGrob("Residue Number", vjust = 0,
gp=gpar(  fontsize=15))
#Combining all the plots together
figure_8G5 <- pose137 + pose157 + pose119 + pose348 + pose349 +
plot_layout(ncol = 1, nrow = 5,  heights = c(25,25,25,25,25))
#Arranging the elements
fig2 <- grid.arrange(title.Grob.8G5,legend.Grob,legend,patchworkGrob(figure_8G5),
nrow=4,ncol=1, heights = c(0.6,0.6,0.2,16),
left = y.grob, bottom = x.grob)
ggsave("8G5_test.png", fig1 ,width = 10, height = 22, units = "in", limitsize = FALSE)
ggsave("8G5_test.png", fig2 ,width = 10, height = 22, units = "in", limitsize = FALSE)
### 8G5 ###
pose137_plotly <- ggplotly(pose137,
tooltip = "text") %>%
layout(hovermode = "closest")
pose137_plotly
saveWidget(pose137_plotly, file = "pose137_8G5.html")
pose157_plotly <- ggplotly(pose157,
tooltip = "text")
saveWidget(pose157_plotly, file = "pose157_8G5.html")
pose119_plotly <- ggplotly(pose119,
tooltip = "text")
saveWidget(pose119_plotly, file = "pose119_8G5.html")
pose348_plotly <- ggplotly(pose348,
tooltip = "text")
saveWidget(pose348_plotly, file = "pose348_8G5.html")
pose349_plotly <- ggplotly(pose349,
tooltip = "text")
saveWidget(pose349_plotly, file = "pose349_8G5.html")
pose137_plotly
figure.Grob <- textGrob(paste(bold("Figure 1: Top 5 Poses for 1E9 Antibody:"),
"The sequences shown above correspond to the poses with the lowest potential energy at the epitote between the 5I2S protein and the 1E9 antibody.
An asterisk (*) indicates positions which have a single, fully conserved residue. A colon (:) indicates conservation between groups of strongly similar properties. A period (.) indicates conservation between groups of weakly similar properties. A space ( ) indicates no conservation."))
figure.Grob <- textGrob(expression(paste((bold("Figure 1: Top 5 Poses for 1E9 Antibody:"),
text.Grob <- richtextGrob(text = "<b>Figure 1: Top 5 Poses for 1E9 Antibody:</b>
The sequences shown above correspond to the poses with the lowest potential energy at the epitote between the 5I2S protein and the 1E9 antibody.
An asterisk (*) indicates positions which have a single, fully conserved residue.
A colon (:) indicates conservation between groups of strongly similar properties.
A period (.) indicates conservation between groups of weakly similar properties.
A space ( ) indicates no conservation.",
parsing = "html")
library(gridExtra)
text.Grob <- richtextGrob(text = "<b>Figure 1: Top 5 Poses for 1E9 Antibody:</b>
The sequences shown above correspond to the poses with the lowest potential energy at the epitote between the 5I2S protein and the 1E9 antibody.
An asterisk (*) indicates positions which have a single, fully conserved residue.
A colon (:) indicates conservation between groups of strongly similar properties.
A period (.) indicates conservation between groups of weakly similar properties.
A space ( ) indicates no conservation.",
parsing = "html")
text.Grob <- richtext_grob(text = "<b>Figure 1: Top 5 Poses for 1E9 Antibody:</b>
The sequences shown above correspond to the poses with the lowest potential energy at the epitote between the 5I2S protein and the 1E9 antibody.
An asterisk (*) indicates positions which have a single, fully conserved residue.
A colon (:) indicates conservation between groups of strongly similar properties.
A period (.) indicates conservation between groups of weakly similar properties.
A space ( ) indicates no conservation.",
parsing = "html")
library(gridtext)
install.packages('gridtext')
text.Grob <- richtext_grob(text = "<b>Figure 1: Top 5 Poses for 1E9 Antibody:</b>
The sequences shown above correspond to the poses with the lowest potential energy at the epitote between the 5I2S protein and the 1E9 antibody.
An asterisk (*) indicates positions which have a single, fully conserved residue.
A colon (:) indicates conservation between groups of strongly similar properties.
A period (.) indicates conservation between groups of weakly similar properties.
A space ( ) indicates no conservation.",
parsing = "html")
text.Grob <- richtext_grob(text = "<b>Figure 1: Top 5 Poses for 1E9 Antibody:</b>
The sequences shown above correspond to the poses with the lowest potential energy at the epitote between the 5I2S protein and the 1E9 antibody.
An asterisk (*) indicates positions which have a single, fully conserved residue.
A colon (:) indicates conservation between groups of strongly similar properties.
A period (.) indicates conservation between groups of weakly similar properties.
A space ( ) indicates no conservation.",
parsing = "html")
text.Grob <- richtext_grob(text = "<b>Figure 1: Top 5 Poses for 1E9 Antibody:</b>
The sequences shown above correspond to the poses with the lowest potential energy at the epitote between the 5I2S protein and the 1E9 antibody.
An asterisk (*) indicates positions which have a single, fully conserved residue.
A colon (:) indicates conservation between groups of strongly similar properties.
A period (.) indicates conservation between groups of weakly similar properties.
A space ( ) indicates no conservation.",
parsing = "html")
library(grid)
text.Grob <- richtext_grob(text = "<b>Figure 1: Top 5 Poses for 1E9 Antibody:</b>
The sequences shown above correspond to the poses with the lowest potential energy at the epitote between the 5I2S protein and the 1E9 antibody.
An asterisk (*) indicates positions which have a single, fully conserved residue.
A colon (:) indicates conservation between groups of strongly similar properties.
A period (.) indicates conservation between groups of weakly similar properties.
A space ( ) indicates no conservation.",
parsing = "html")
legend.Grob <- gridtext::textGrob(" ' ' No conservation  '.' Weakly conserved \n ':' Strongly conserved  '*' Fully Conserved")
legend.Grob <- textGrob(" ' ' No conservation  '.' Weakly conserved \n ':' Strongly conserved  '*' Fully Conserved")
text.Grob <- gridtext::richtext_grob(text = "<b>Figure 1: Top 5 Poses for 1E9 Antibody:</b>
The sequences shown above correspond to the poses with the lowest potential energy at the epitote between the 5I2S protein and the 1E9 antibody.
An asterisk (*) indicates positions which have a single, fully conserved residue.
A colon (:) indicates conservation between groups of strongly similar properties.
A period (.) indicates conservation between groups of weakly similar properties.
A space ( ) indicates no conservation.",
parsing = "html")
text.Grob <-richtext_grob(text = "<b>Figure 1: Top 5 Poses for 1E9 Antibody:</b>
The sequences shown above correspond to the poses with the lowest potential energy at the epitote between the 5I2S protein and the 1E9 antibody.
An asterisk (*) indicates positions which have a single, fully conserved residue.
A colon (:) indicates conservation between groups of strongly similar properties.
A period (.) indicates conservation between groups of weakly similar properties.
A space ( ) indicates no conservation.",
parsing = "html")
text.Grob <- richtext_grob(text = "<b>Figure 1: Top 5 Poses for 1E9 Antibody:</b>
The sequences shown above correspond to the poses with the lowest potential energy at the epitote between the 5I2S protein and the 1E9 antibody.
An asterisk (*) indicates positions which have a single, fully conserved residue.
A colon (:) indicates conservation between groups of strongly similar properties.
A period (.) indicates conservation between groups of weakly similar properties.
A space ( ) indicates no conservation."
)
text.Grob <- richtext_grob(text = "<b>Figure 1: Top 5 Poses for 1E9 Antibody:</b>
The sequences shown above correspond to the poses with the lowest potential energy at the epitote between the 5I2S protein and the 1E9 antibody.
An asterisk (*) indicates positions which have a single, fully conserved residue.
A colon (:) indicates conservation between groups of strongly similar properties.
A period (.) indicates conservation between groups of weakly similar properties.
A space ( ) indicates no conservation."
)
library(gridtext)
library(gridtext)
#Creating the x and y axis labels
title.Grob <- textGrob("Top 5 Poses for 1E9 Antibody", gp=gpar(fontsize = 20))
text.Grob <- richtext_grob(text = "<b>Figure 1: Top 5 Poses for 1E9 Antibody:</b>
The sequences shown above correspond to the poses with the lowest potential energy at the epitote between the 5I2S protein and the 1E9 antibody.
An asterisk (*) indicates positions which have a single, fully conserved residue.
A colon (:) indicates conservation between groups of strongly similar properties.
A period (.) indicates conservation between groups of weakly similar properties.
A space ( ) indicates no conservation."
)
text.Grob <- richtext_grob(text = "<b>Figure 1: Top 5 Poses for 1E9 Antibody:</b>
The sequences shown above correspond to the poses with the lowest potential energy at the epitote between the 5I2S protein and the 1E9 antibody.
An asterisk (*) indicates positions which have a single, fully conserved residue.
A colon (:) indicates conservation between groups of strongly similar properties.
A period (.) indicates conservation between groups of weakly similar properties.
A space ( ) indicates no conservation."
)
grid.newpage()
grid.draw(text.Grob)
text.Grob <- richtext_grob(text = "<b>Figure 1: Top 5 Poses for 1E9 Antibody:</b>
The sequences shown above correspond to the poses with<br>
the lowest potential energy at the epitote between the 5I2S
protein and the 1E9 antibody. An asterisk (*) indicates positions <br>
which have a single, fully conserved residue. A colon (:) indicates
conservation between groups of strongly similar properties. <br>
A period (.) indicates conservation between groups of weakly similar
properties. A space ( ) indicates no conservation."
)
grid.newpage()
grid.draw(text.Grob)
text.Grob <- richtext_grob(text = "<b>Figure 1: Top 5 Poses for 1E9 Antibody:</b>
The sequences shown above correspond to the poses with<br>
the lowest potential energy at the epitote between the 5I2S
protein and the 1E9 antibody. An asterisk (*) indicates positions <br>
which have a single, fully conserved residue. A colon (:) indicates
conservation between groups of strongly similar properties. <br>
A period (.) indicates conservation between groups of weakly similar
properties. A space ( ) indicates no conservation.",
just = 'left'
)
txt <-  "<b>Figure 1: Top 5 Poses for 1E9 Antibody:</b>
The sequences shown above correspond to the poses with<br>
the lowest potential energy at the epitote between the 5I2S
protein and the 1E9 antibody. An asterisk (*) indicates positions <br>
which have a single, fully conserved residue. A colon (:) indicates
conservation between groups of strongly similar properties. <br>
A period (.) indicates conservation between groups of weakly similar
properties. A space ( ) indicates no conservation."
text.Grob <- richtext_grob(text = txt,
just = 'left'
)
text.Grob <- richtext_grob(text = txt,
hjust = c(0.5,0,0,1)
)
grid.newpage()
grid.draw(text.Grob)
text.Grob <- richtext_grob(text = txt,
just = "left"
)
text.Grob <- richtext_grob(text = txt,
gp = gpar(just = "left")
)
grid.newpage()
grid.draw(text.Grob)
legend.Grob <- textGrob(" ' ' No conservation  '.' Weakly conserved \n ':' Strongly conserved  '*' Fully Conserved")
text.Grob <- richtext_grob(text = txt,
gp = gpar(just = "left", fontsize = 12)
)
grid.newpage()
grid.draw(text.Grob)
text.Grob <- richtext_grob(text = txt,
gp = gpar(just = "left", fontsize = 10)
)
grid.newpage()
grid.draw(text.Grob)
text.Grob <- richtext_grob(text = txt,
gp = gpar(just = "left", fontsize = 8)
)
grid.newpage()
grid.draw(text.Grob)
text.Grob <- richtext_grob(text = txt,
gp = gpar(fontsize = 8,just = "left")
)
grid.newpage()
grid.draw(text.Grob)
text.Grob <- richtext_grob(text = txt,
parsing = "html",
gp = gpar(fontsize = 8, just = "left")
)
text.Grob <- richtext_grob(text = txt,
gp = gpar(fontsize = 8, just = "left")
)
grid.newpage()
grid.draw(text.Grob)
text.Grob <- richtext_grob(text = txt,
gp = gpar( just = "left")
)
grid.newpage()
grid.draw(text.Grob)
text.Grob <- richtext_grob(text = txt,
gp = gpar(fontsize = 8, just = "left")
)
grid.newpage()
grid.draw(text.Grob)
